// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// STARTING NEXT AUTH RECOMMENDED MODELS

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  ownedChannels ChannelAdmin[]
  followingChannels   ChannelFollower[]
  purchases PurchaseHistory[]
  transactions EpisodeTransaction[]
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// ENDING NEXT AUTH RECOMMENDED MODELS


model Channel {
  id         Int        @id @default(autoincrement())
  title      String
  slug       String @unique
  admins     ChannelAdmin[]
  followers ChannelFollower[]
  purchases PurchaseHistory[]
  episode Episode[]
}

model ChannelAdmin {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int     
  channel    Channel @relation(fields: [channelId], references: [id])
  channelId  Int      
  @@id([userId, channelId])
}

model ChannelFollower {
  user        User     @relation(fields: [userId], references: [id])
  userId      Int     
  channel    Channel @relation(fields: [channelId], references: [id])
  channelId  Int      
  @@id([userId, channelId])
}


model Episode {
  id         Int      @id @default(autoincrement())
  title String
  description String
  date     DateTime  @default(now())
  channelId Int
  channel    Channel     @relation(fields: [channelId], references: [id])
  transactions EpisodeTransaction[]
}

model EpisodeTransaction {
  id         Int      @id @default(autoincrement())
  episodeId Int
  userId Int
  amount   Int
  type String
  user    User     @relation(fields: [userId], references: [id])
  episode    Episode     @relation(fields: [episodeId], references: [id])
}

model PurchaseHistory {
  id         Int      @id @default(autoincrement())
  channelId Int
  userId Int
  amount   Int
  price Int
  currency String
  user    User     @relation(fields: [userId], references: [id])
  channel    Channel     @relation(fields: [channelId], references: [id])
}

